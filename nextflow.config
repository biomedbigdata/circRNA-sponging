/*
 * -------------------------------------------------
 *  nf-core/circrnasponging Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  out_dir = './results'
  gene_pred = null
  fasta = null
  gtf = null
  STAR_index = null
  SALMON_index = null
  transcriptome = null
  single_end = false
  publish_dir_mode = 'copy'
  help = false
  samplesheet = null
  miRNA_raw_counts = null
  miRNA_adapter = null
  bowtie_index = null
  species = null
  genome_version = null
  mature_fasta = null
  mature_other_fasta = null
  hairpin_fasta = null
  sample_group = null
  read_threshold = 5
  sample_percentage = 0.2
  circRNA_only = false
  offline_circ_db = null
  database_annotation = true
  differential_expression = true
  sponge = false
  tarpmir = false
  model = null
  threads = 2
  splitter = 1000
  target_scan_symbols = '${projectDir}/data/miRNA_target_symbols/hsa_mirWalk_lncbase_21_ENSG.tsv.gz'
  miRTarBaseData = null
  TargetScanData = null
  lncBaseData = null
  miRDB_data = null
  fdr = 0.1
  gene_annotation = "ENSG"

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

//process.container = 'circrnasponging:latest'
process.container = 'docker://octavia97/circrnasponging:latest'
//docker.enabled = true

singularity.enabled = true
singularity.autoMounts = true

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


