/*
 * -------------------------------------------------
 *  nf-core/circrnasponging Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  // Workflow flags
  outdir = './results'
  bed12 = null
  fasta = null
  gtf = null
  STAR_index = null
  transcriptome = null
  single_end = false
  publish_dir_mode = 'copy'
  help = false
  samplesheet = null
  miRNA_raw_counts = null
  miRNA_normalization = true
  miRNA_filtering = true
  protocol = 'illumina'
  miRNA_adapter = null
  bowtie_index = null
  species = null
  genome = null
  miRNA_fasta = null
  miRNA_related_fasta = null
  hairpin_fasta = null
  sample_group = null
  read_threshold = 5
  sample_percentage = 0.2
  circRNA_only = false
  // database annotation
  offline_circ_db = null
  database_annotation = true
  annotated_only = false
  // psirc options
  quantification = true
  psirc_exc = null
  psirc_index = null
  pseudocount = 0.001
  // differential expression
  differential_expression = true
  // PITA options
  pita = true
  pita_path = null
  pita_l = '6-8'
  pita_gu = '6;0,7;1,8;1'
  pita_m = '6;0,7;0,8;1'
  // TarPmiR options
  tarpmir = true
  model = null
  p = 0.8
  threads = 2
  // Fasta entries per task for miRNA target prediction
  splitter = 50
  // sponging options
  correlations = true
  sponge = true
  target_scan_symbols = null
  tpm = true
  normalize = true
  majority_matcher = 'end'
  fdr = 0.01
  log2fc = 0
  // spongEffects
  spongEffects = true
  se_train = 0.8

  // metbrewer color options
  palette = "Veronese"

  // AWS s3 base
  igenomes_base = 's3://ngi-igenomes/igenomes'

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 25
  max_time = 240.h
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// docker container
process.container = 'leonschwartzdocker/circrnapipeline:latest'

profiles {
  docker {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
    singularity.enabled = false
  }
  singularity {
    singularity.enabled = true
    singularity.cacheDir = '/nfs/scratch/singularity_cache'
    singularity.autoMounts = true
  }
}

// Load igenomes.config for genomic file downloads
includeConfig 'conf/igenomes.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


